{"version":3,"sources":["components/Homepage.js","components/header.js","components/schedule.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["Homepage","props","liveProgrammes","length","className","map","item","key","programs","channel","name","getChannel","i","channels","lenght","id","src","logos","url","alt","getImg","getTitle","endTime","beginTime","startTime","substring","getTime","header","style","textDecoration","color","to","Schedule","useState","futureProgrammes","setFutureProgrammes","date","channelId","channelName","request","setRequest","useEffect","setTodayDate","fetchSchedule","console","log","today","Date","mm","getMonth","slice","getFullYear","fetch","then","response","json","data","schedule","handleChange","event","preventDefault","target","value","htmlFor","type","onChange","e","getImgChannel","thumbnails","width","shortDescription","footer","App","setChannels","setLiveProgrammes","fetchChannles","fetchLiveProgrammes","exact","path","render","return","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a2437a5f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { getByTitle } from \"@testing-library/react\";\r\n\r\nfunction Homepage(props) {\r\n  const getImg = item => {\r\n    if (item.programs.length > 0) {\r\n      for (let i = 0; props.channels.lenght > i; i++) {\r\n        if (props.channels[i].id === item.channel.id) {\r\n          return (\r\n            <img\r\n              src={props.channels[i].logos[0].url}\r\n              alt={props.channels[i].name}\r\n            ></img>\r\n          );\r\n        } else {\r\n          return <p>No imahe available</p>;\r\n        }\r\n      }\r\n    } else {\r\n      return <p>No IMG available</p>;\r\n    }\r\n  };\r\n\r\n  const getTitle = item => {\r\n    if (item.programs.length > 0) {\r\n      return item.programs[0].name;\r\n    } else {\r\n      return <p>No Porgramme available</p>;\r\n    }\r\n  };\r\n  const getChannel = item => {\r\n    if (item.programs.length > 0) {\r\n      return item.programs[0].channel.name;\r\n    } else {\r\n      return <p>No Porgramme available</p>;\r\n    }\r\n  };\r\n\r\n  /* This was supposed to remove the data which don't have data in the array.\r\n  const getCurrentChannels = () => {\r\n    for (let i = 0; props.liveProgrammes.length > i; i++) {\r\n      if (typeof props.liveProgrammes.programs !== \"undefined\") {\r\n\r\n  the scrambled being false gave me the impression that those channels are available over cable.\r\n  I was planning on showing different price tiers, but i couldn't make the previous work.\r\n        if (props.liveProgrammes.channel.scrambled === false) {\r\n          return (\r\n            <div>\r\n              <p>{props.liveProgrammes.channel.name}</p>\r\n            </div>\r\n          );\r\n        } else {\r\n          return <p>This doesnt work</p>;\r\n        }\r\n      } else {\r\n        return <p>This doesnt work</p>;\r\n      }\r\n    }\r\n  };*/\r\n\r\n  const getTime = item => {\r\n    if (item.programs.length > 0) {\r\n      let endTime = item.programs[0].endTime;\r\n      let beginTime = item.programs[0].startTime;\r\n      endTime = endTime.substring(11);\r\n      beginTime = beginTime.substring(11);\r\n      return beginTime + \" - \" + endTime;\r\n    } else {\r\n      return <p> no end time</p>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>\r\n        Over {props.liveProgrammes.length} different programmes available!\r\n      </h1>\r\n\r\n      <div className=\"liveContainer\">\r\n        {props.liveProgrammes.map((item, key) => (\r\n          <div className=\"liveChannelContainer\" key={key}>\r\n            {\" \"}\r\n            <div className=\"channelName\">{getChannel(item)}</div>\r\n            <div>{getImg(item)}</div>\r\n            <p>Now Live:</p>\r\n            <div className=\"programName\">{getTitle(item)}</div>\r\n            <div className=\"endTimeProgram\">{getTime(item)}</div>\r\n          </div>\r\n        ))}\r\n        {/*<Channelcards channels={channels} changeChannel={setChannels} />*/}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import React from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nfunction header() {\r\n  return (\r\n    <nav className=\"header\">\r\n      <Link style={{ textDecoration: \"none\", color: \"blue\" }} to=\"/\">\r\n        <h1>Elisa logo</h1>\r\n      </Link>\r\n      <ul className=\"listContainer\">\r\n        <li>\r\n          <Link style={{ textDecoration: \"none\", color: \"blue\" }} to=\"/home\">\r\n            Home\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link\r\n            style={{ textDecoration: \"none\", color: \"blue\" }}\r\n            to=\"/schedule\"\r\n          >\r\n            Schedule\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default header;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nfunction Schedule(props) {\r\n  const [futureProgrammes, setFutureProgrammes] = useState([]);\r\n  const [request, setRequest] = useState({\r\n    date: \"\",\r\n    channelId: 37,\r\n    channelName: \"\"\r\n  });\r\n\r\n  useEffect(() => {\r\n    setTodayDate();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchSchedule();\r\n    console.log(request.date);\r\n  }, [request]);\r\n\r\n  const setTodayDate = () => {\r\n    let today = new Date();\r\n    let dd = 22;\r\n    let mm = (\"0\" + (today.getMonth() + 1)).slice(-2);\r\n    let yyyy = today.getFullYear();\r\n    let date = yyyy + \"-\" + mm + \"-\" + dd;\r\n    setRequest({ ...request, date: date });\r\n    console.log(date);\r\n  };\r\n\r\n  let url =\r\n    \"https://rest-api.elisaviihde.fi/rest/epg/schedule?channelId=\" +\r\n    request.channelId +\r\n    \"&date=\" +\r\n    request.date;\r\n\r\n  const fetchSchedule = () => {\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setFutureProgrammes(data.schedule[0]);\r\n      });\r\n  };\r\n\r\n  const handleChange = event => {\r\n    event.preventDefault();\r\n    setRequest({ ...request, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const getImgChannel = () => {\r\n    for (let i = 0; props.channels.length > i; i++) {\r\n      if (props.channels[i].id === request.channelId) {\r\n        return props.channels[i].logos[6].url;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"scheduleContainer\">\r\n      <h3>\r\n        Welcome to the schedule checker. Select a future or past date and a\r\n        channel to check it's schedule.\r\n      </h3>\r\n      <div className=\"inputContainer\">\r\n        <div className=\"inputDiv\">\r\n          <label htmlFor=\"requestedDate\">Select a date:</label>\r\n          <input\r\n            type=\"date\"\r\n            id=\"requestedDate\"\r\n            name=\"date\"\r\n            value={request.date}\r\n            onChange={e => handleChange(e)}\r\n          ></input>\r\n        </div>\r\n        <div className=\"inputDiv\">\r\n          <label htmlFor=\"requestedChannel\">Select a channel:</label>\r\n          <select\r\n            id=\"requestedChannel\"\r\n            value={request.channelId}\r\n            name=\"channelId\"\r\n            onChange={e => handleChange(e)}\r\n          >\r\n            {props.channels.map((item, key) => (\r\n              <option key={key} value={item.id}>\r\n                {item.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <h2>\r\n          The programme schedule for{\" \"}\r\n          <img\r\n            src={getImgChannel()}\r\n            alt={\"logo of\" + request.channelName}\r\n          ></img>\r\n          on {request.date}\r\n        </h2>\r\n        <div className=\"programmesContainer\">\r\n          {futureProgrammes.programs ? (\r\n            futureProgrammes.programs.map((item, key) => (\r\n              <div key={key} className=\"liveProgrammeContainer\">\r\n                <div className=\"liveProgrammeTop\">\r\n                  <p className=\"channelName\">{item.name}</p>\r\n                  <p>\r\n                    {item.startTime.substring(11)} -{\" \"}\r\n                    {item.endTime.substring(11)}{\" \"}\r\n                  </p>\r\n                </div>\r\n                <img\r\n                  src={item.thumbnails[1].url}\r\n                  alt={\"thumbnail of\" + item.name}\r\n                  width=\"400\"\r\n                ></img>\r\n                <p>{item.shortDescription}</p>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p>Nothin</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Schedule;\r\n","import React from \"react\";\r\n\r\nfunction footer() {\r\n  return (\r\n    <footer>\r\n      <p>\r\n        The programme- and channel data is provided by Elisa as part of their\r\n        pre-assignment.\r\n      </p>\r\n      <p>This assignment is made by Marius van der Busse</p>\r\n      <p>mariusvanderbusse@hotmail.com</p>\r\n      <p>+358 414720503</p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default footer;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Homepage from \"./components/Homepage\";\nimport Header from \"./components/header\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Schedule from \"./components/schedule\";\nimport Footer from \"./components/footer\";\n\nfunction App() {\n  const [channels, setChannels] = useState([]);\n  const [liveProgrammes, setLiveProgrammes] = useState([]);\n\n  useEffect(() => {\n    fetchChannles();\n    fetchLiveProgrammes();\n  }, []);\n\n  const fetchChannles = () => {\n    fetch(\"https://rest-api.elisaviihde.fi/rest/epg/channels\")\n      .then(response => response.json())\n      .then(data => {\n        setChannels(data.channels);\n        console.log(data.channels);\n      });\n  };\n\n  const fetchLiveProgrammes = () => {\n    fetch(\"https://rest-api.elisaviihde.fi/rest/epg/schedule/live\")\n      .then(response => response.json())\n      .then(data => {\n        setLiveProgrammes(data.schedule);\n        console.log(data.schedule);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header />\n        <Switch>\n          <Route\n            exact\n            path={[\"/\", \"/home\"]}\n            render={props => (\n              <Homepage\n                {...props}\n                channels={channels}\n                liveProgrammes={liveProgrammes}\n                setLiveProgrammes={setLiveProgrammes}\n              />\n            )}\n          />\n          <Route\n            path=\"/schedule\"\n            render={props => (\n              <Schedule\n                {...props}\n                channels={channels}\n                liveProgrammes={liveProgrammes}\n              />\n            )}\n          />\n\n          <Route return={() => <h1>Page not found</h1>} />\n        </Switch>\n      </Router>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}